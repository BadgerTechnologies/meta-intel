From 545a5fac5d6bd0b64693dfcb15b321280418ac13 Mon Sep 17 00:00:00 2001
From: Pablo de Lara <pablo.de.lara.guarch@intel.com>
Date: Wed, 9 Jul 2014 15:35:36 +0100
Subject: [PATCH] ring: simplify unit tests

Upstream-Status: Backport
Imported patch from: http://dpdk.org/browse/dpdk/log/

As this unit test does not create devices anymore,
and uses devices created by EAL option --vdev,
there were unnecesary tests that were repeated,
so they have been removed.

So now there are three tests:

1 - Test two devices that share a ring, one device
    with just one RX queue and the other with one
    TX queue.

2 - Test a device connected to itself (loopback) by
    a ring, with both RX and TX queue.

3 - Test two devices that share a ring, but both devices
    with RX and TX queue, so they can send packets to themselves
    and to the other device.

Signed-off-by: Pablo de Lara <pablo.de.lara.guarch@intel.com>
Acked-by: Neil Horman <nhorman@tuxdriver.com>
(cherry picked from commit 572eb3cd834c5e21d7fa946432b89c1c9d63fe61)
Signed-off-by: Sreeju Selvaraj <sreeju.armughanx.selvaraj@intel.com>
---
 app/test/test_pmd_ring.c | 202 +++++++++++++++++------------------------------
 1 file changed, 72 insertions(+), 130 deletions(-)

diff --git a/app/test/test_pmd_ring.c b/app/test/test_pmd_ring.c
index 0d3d95c..19ad0e9 100644
--- a/app/test/test_pmd_ring.c
+++ b/app/test/test_pmd_ring.c
@@ -39,18 +39,13 @@
 #include <rte_eth_ring.h>
 #include <rte_ethdev.h>
 
-/* two test rings, r1 is used by two ports, r2 just by one */
-static struct rte_ring *r1[2], *r2;
-
 static struct rte_mempool *mp;
-static uint8_t start_idx; /* will store the port id of the first of our new ports */
-
-#define TX_PORT (uint8_t)(start_idx + 1)
-#define RX_PORT (uint8_t)(start_idx + 2)
-#define RXTX_PORT (uint8_t)(start_idx + 3)
-#define RXTX_PORT2 (uint8_t)(start_idx + 4)
-#define RXTX_PORT4 (uint8_t)(start_idx + 6)
-#define RXTX_PORT5 (uint8_t)(start_idx + 7)
+
+#define TX_PORT 0
+#define RX_PORT 1
+#define RXTX_PORT 2
+#define RXTX_PORT2 3
+#define RXTX_PORT3 4
 #define SOCKET0 0
 
 #define RING_SIZE 256
@@ -86,7 +81,7 @@ test_ethdev_configure(void)
 		return -1;
 	}
 	if (rte_eth_dev_configure(RXTX_PORT, 1, 1, &null_conf) < 0) {
-		printf("Configure failed for RX port\n");
+		printf("Configure failed for RXTX port\n");
 		return -1;
 	}
 
@@ -250,197 +245,162 @@ test_stats_reset(void)
 }
 
 static int
-test_pmd_ring_init(void)
+test_pmd_ring_pair_create_attach(void)
 {
-	struct rte_eth_stats stats;
+	struct rte_eth_stats stats, stats2;
 	struct rte_mbuf buf, *pbuf = &buf;
 	struct rte_eth_conf null_conf;
 
-	printf("Testing ring pmd init\n");
-
-	if (RXTX_PORT2 >= RTE_MAX_ETHPORTS) {
+	if ((RXTX_PORT2 >= RTE_MAX_ETHPORTS) || (RXTX_PORT3 >= RTE_MAX_ETHPORTS)) {
 		printf(" TX/RX port exceed max eth ports\n");
 		return -1;
 	}
-	if (rte_eth_dev_configure(RXTX_PORT2, 1, 1, &null_conf) < 0) {
+	if ((rte_eth_dev_configure(RXTX_PORT2, 1, 1, &null_conf) < 0)
+		|| (rte_eth_dev_configure(RXTX_PORT3, 1, 1, &null_conf) < 0)) {
 		printf("Configure failed for RXTX port\n");
 		return -1;
 	}
 
-	if (rte_eth_tx_queue_setup(RXTX_PORT2, 0, RING_SIZE, SOCKET0, NULL) < 0) {
+	if ((rte_eth_tx_queue_setup(RXTX_PORT2, 0, RING_SIZE, SOCKET0, NULL) < 0)
+		|| (rte_eth_tx_queue_setup(RXTX_PORT3, 0, RING_SIZE, SOCKET0, NULL) < 0)) {
 		printf("TX queue setup failed\n");
 		return -1;
 	}
 
-	if (rte_eth_rx_queue_setup(RXTX_PORT2, 0, RING_SIZE, SOCKET0,
-			NULL, mp) < 0) {
+	if ((rte_eth_rx_queue_setup(RXTX_PORT2, 0, RING_SIZE, SOCKET0, NULL, mp) < 0)
+		|| (rte_eth_rx_queue_setup(RXTX_PORT3, 0, RING_SIZE, SOCKET0, NULL, mp) < 0)) {
 		printf("RX queue setup failed\n");
 		return -1;
 	}
 
-	if (rte_eth_dev_start(RXTX_PORT2) < 0) {
-		printf("Error starting RX port\n");
+	if ((rte_eth_dev_start(RXTX_PORT2) < 0)
+		|| (rte_eth_dev_start(RXTX_PORT3) < 0)) {
+		printf("Error starting RXTX port\n");
 		return -1;
 	}
 
-	/* send and receive 1 packet and check for stats update */
+	/*
+	 * send and receive 1 packet (RXTX_PORT2 -> RXTX_PORT3)
+	 * and check for stats update
+	 */
 	if (rte_eth_tx_burst(RXTX_PORT2, 0, &pbuf, 1) != 1) {
 		printf("Error sending packet to RXTX port\n");
 		return -1;
 	}
 
-	if (rte_eth_rx_burst(RXTX_PORT2, 0, &pbuf, 1) != 1) {
+	if (rte_eth_rx_burst(RXTX_PORT3, 0, &pbuf, 1) != 1) {
 		printf("Error receiving packet from RXTX port\n");
 		return -1;
 	}
 
 	rte_eth_stats_get(RXTX_PORT2, &stats);
-	if (stats.ipackets != 1 || stats.opackets != 1 ||
+	rte_eth_stats_get(RXTX_PORT3, &stats2);
+	if (stats.ipackets != 0 || stats.opackets != 1 ||
 			stats.ibytes != 0 || stats.obytes != 0 ||
 			stats.ierrors != 0 || stats.oerrors != 0) {
 		printf("Error: RXTX port stats are not as expected\n");
 		return -1;
 	}
 
-	rte_eth_dev_stop(RXTX_PORT2);
-
-	return 0;
-}
-
-static int
-test_pmd_ring_pair_create(void)
-{
-	struct rte_eth_stats stats, stats2;
-	struct rte_mbuf buf, *pbuf = &buf;
-	struct rte_eth_conf null_conf;
-
-	if ((RXTX_PORT4 >= RTE_MAX_ETHPORTS) || (RXTX_PORT5 >= RTE_MAX_ETHPORTS)) {
-		printf(" TX/RX port exceed max eth ports\n");
-		return -1;
-	}
-	if ((rte_eth_dev_configure(RXTX_PORT4, 1, 1, &null_conf) < 0)
-		|| (rte_eth_dev_configure(RXTX_PORT5, 1, 1, &null_conf) < 0)) {
-		printf("Configure failed for RXTX port\n");
-		return -1;
-	}
-
-	if ((rte_eth_tx_queue_setup(RXTX_PORT4, 0, RING_SIZE, SOCKET0, NULL) < 0)
-		|| (rte_eth_tx_queue_setup(RXTX_PORT5, 0, RING_SIZE, SOCKET0, NULL) < 0)) {
-		printf("TX queue setup failed\n");
-		return -1;
-	}
-
-	if ((rte_eth_rx_queue_setup(RXTX_PORT4, 0, RING_SIZE, SOCKET0, NULL, mp) < 0)
-		|| (rte_eth_rx_queue_setup(RXTX_PORT5, 0, RING_SIZE, SOCKET0, NULL, mp) < 0)) {
-		printf("RX queue setup failed\n");
-		return -1;
-	}
-
-	if ((rte_eth_dev_start(RXTX_PORT4) < 0)
-		|| (rte_eth_dev_start(RXTX_PORT5) < 0)) {
-		printf("Error starting RXTX port\n");
+	if (stats2.ipackets != 1 || stats2.opackets != 0 ||
+			stats2.ibytes != 0 || stats2.obytes != 0 ||
+			stats2.ierrors != 0 || stats2.oerrors != 0) {
+		printf("Error: RXTX port stats are not as expected\n");
 		return -1;
 	}
 
-	/* send and receive 1 packet and check for stats update */
-	if (rte_eth_tx_burst(RXTX_PORT4, 0, &pbuf, 1) != 1) {
+	/*
+	 * send and receive 1 packet (RXTX_PORT3 -> RXTX_PORT2)
+	 * and check for stats update
+	 */
+	if (rte_eth_tx_burst(RXTX_PORT3, 0, &pbuf, 1) != 1) {
 		printf("Error sending packet to RXTX port\n");
 		return -1;
 	}
 
-	if (rte_eth_rx_burst(RXTX_PORT5, 0, &pbuf, 1) != 1) {
+	if (rte_eth_rx_burst(RXTX_PORT2, 0, &pbuf, 1) != 1) {
 		printf("Error receiving packet from RXTX port\n");
 		return -1;
 	}
 
-	rte_eth_stats_get(RXTX_PORT4, &stats);
-	rte_eth_stats_get(RXTX_PORT5, &stats2);
-	if (stats.ipackets != 0 || stats.opackets != 1 ||
+	rte_eth_stats_get(RXTX_PORT2, &stats);
+	rte_eth_stats_get(RXTX_PORT3, &stats2);
+	if (stats.ipackets != 1 || stats.opackets != 1 ||
 			stats.ibytes != 0 || stats.obytes != 0 ||
 			stats.ierrors != 0 || stats.oerrors != 0) {
 		printf("Error: RXTX port stats are not as expected\n");
 		return -1;
 	}
 
-	if (stats2.ipackets != 1 || stats2.opackets != 0 ||
+	if (stats2.ipackets != 1 || stats2.opackets != 1 ||
 			stats2.ibytes != 0 || stats2.obytes != 0 ||
 			stats2.ierrors != 0 || stats2.oerrors != 0) {
 		printf("Error: RXTX port stats are not as expected\n");
 		return -1;
 	}
 
-	rte_eth_dev_stop(RXTX_PORT4);
-	rte_eth_dev_stop(RXTX_PORT5);
-
-	return 0;
-}
-
-static int
-test_pmd_ring_pair_attach(void)
-{
-	struct rte_eth_stats stats, stats2;
-	struct rte_mbuf buf, *pbuf = &buf;
-	struct rte_eth_conf null_conf;
-
-	if ((RXTX_PORT4 >= RTE_MAX_ETHPORTS) || (RXTX_PORT5 >= RTE_MAX_ETHPORTS)) {
-		printf(" TX/RX port exceed max eth ports\n");
-		return -1;
-	}
-	if ((rte_eth_dev_configure(RXTX_PORT4, 1, 1, &null_conf) < 0)
-		|| (rte_eth_dev_configure(RXTX_PORT5, 1, 1, &null_conf) < 0)) {
-		printf("Configure failed for RXTX port\n");
+	/*
+	 * send and receive 1 packet (RXTX_PORT2 -> RXTX_PORT2)
+	 * and check for stats update
+	 */
+	if (rte_eth_tx_burst(RXTX_PORT2, 0, &pbuf, 1) != 1) {
+		printf("Error sending packet to RXTX port\n");
 		return -1;
 	}
 
-	if ((rte_eth_tx_queue_setup(RXTX_PORT4, 0, RING_SIZE, SOCKET0, NULL) < 0)
-		|| (rte_eth_tx_queue_setup(RXTX_PORT5, 0, RING_SIZE, SOCKET0, NULL) < 0)) {
-		printf("TX queue setup failed\n");
+	if (rte_eth_rx_burst(RXTX_PORT2, 0, &pbuf, 1) != 1) {
+		printf("Error receiving packet from RXTX port\n");
 		return -1;
 	}
 
-	if ((rte_eth_rx_queue_setup(RXTX_PORT4, 0, RING_SIZE, SOCKET0, NULL, mp) < 0)
-		|| (rte_eth_rx_queue_setup(RXTX_PORT5, 0, RING_SIZE, SOCKET0, NULL, mp) < 0)) {
-		printf("RX queue setup failed\n");
+	rte_eth_stats_get(RXTX_PORT2, &stats);
+	rte_eth_stats_get(RXTX_PORT3, &stats2);
+	if (stats.ipackets != 2 || stats.opackets != 2 ||
+			stats.ibytes != 0 || stats.obytes != 0 ||
+			stats.ierrors != 0 || stats.oerrors != 0) {
+		printf("Error: RXTX port stats are not as expected\n");
 		return -1;
 	}
 
-	if ((rte_eth_dev_start(RXTX_PORT4) < 0)
-		|| (rte_eth_dev_start(RXTX_PORT5) < 0)) {
-		printf("Error starting RXTX port\n");
+	if (stats2.ipackets != 1 || stats2.opackets != 1 ||
+			stats2.ibytes != 0 || stats2.obytes != 0 ||
+			stats2.ierrors != 0 || stats2.oerrors != 0) {
+		printf("Error: RXTX port stats are not as expected\n");
 		return -1;
 	}
 
-	rte_eth_stats_reset(RXTX_PORT4);
-	rte_eth_stats_reset(RXTX_PORT5);
-
-	/* send and receive 1 packet and check for stats update */
-	if (rte_eth_tx_burst(RXTX_PORT4, 0, &pbuf, 1) != 1) {
+	/*
+	 * send and receive 1 packet (RXTX_PORT3 -> RXTX_PORT3)
+	 * and check for stats update
+	 */
+	if (rte_eth_tx_burst(RXTX_PORT3, 0, &pbuf, 1) != 1) {
 		printf("Error sending packet to RXTX port\n");
 		return -1;
 	}
-	if (rte_eth_rx_burst(RXTX_PORT5, 0, &pbuf, 1) != 1) {
+
+	if (rte_eth_rx_burst(RXTX_PORT3, 0, &pbuf, 1) != 1) {
 		printf("Error receiving packet from RXTX port\n");
 		return -1;
 	}
 
-	rte_eth_stats_get(RXTX_PORT4, &stats);
-	rte_eth_stats_get(RXTX_PORT5, &stats2);
-	if (stats.ipackets != 0 || stats.opackets != 1 ||
+	rte_eth_stats_get(RXTX_PORT2, &stats);
+	rte_eth_stats_get(RXTX_PORT3, &stats2);
+	if (stats.ipackets != 2 || stats.opackets != 2 ||
 			stats.ibytes != 0 || stats.obytes != 0 ||
 			stats.ierrors != 0 || stats.oerrors != 0) {
 		printf("Error: RXTX port stats are not as expected\n");
 		return -1;
 	}
 
-	if (stats2.ipackets != 1 || stats2.opackets != 0 ||
+	if (stats2.ipackets != 2 || stats2.opackets != 2 ||
 			stats2.ibytes != 0 || stats2.obytes != 0 ||
 			stats2.ierrors != 0 || stats2.oerrors != 0) {
 		printf("Error: RXTX port stats are not as expected\n");
 		return -1;
 	}
 
-	rte_eth_dev_stop(RXTX_PORT4);
-	rte_eth_dev_stop(RXTX_PORT5);
+	rte_eth_dev_stop(RXTX_PORT2);
+	rte_eth_dev_stop(RXTX_PORT3);
 
 	return 0;
 }
@@ -448,17 +408,6 @@ test_pmd_ring_pair_attach(void)
 int
 test_pmd_ring(void)
 {
-	r1[0] = rte_ring_create("R1", RING_SIZE, 0, 0);
-	r1[1] = rte_ring_create("R2", RING_SIZE, 0, 0);
-	if (r1[0] == NULL && (r1[0] = rte_ring_lookup("R1")) == NULL)
-		return -1;
-	if (r1[1] == NULL && (r1[1] = rte_ring_lookup("R2")) == NULL)
-		return -1;
-
-	r2 = rte_ring_create("R3", RING_SIZE, 0, RING_F_SP_ENQ|RING_F_SC_DEQ);
-	if (r2 == NULL && (r2 = rte_ring_lookup("R3")) == NULL)
-		return -1;
-
 	mp = rte_mempool_create("mbuf_pool", NB_MBUF,
 			MBUF_SIZE, 32,
 			sizeof(struct rte_pktmbuf_pool_private),
@@ -468,8 +417,6 @@ test_pmd_ring(void)
 	if (mp == NULL)
 		return -1;
 
-	start_idx = rte_eth_dev_count();
-
 	if ((TX_PORT >= RTE_MAX_ETHPORTS) || (RX_PORT >= RTE_MAX_ETHPORTS)\
 		|| (RXTX_PORT >= RTE_MAX_ETHPORTS)) {
 		printf(" TX/RX port exceed max eth ports\n");
@@ -492,14 +439,9 @@ test_pmd_ring(void)
 	rte_eth_dev_stop(TX_PORT);
 	rte_eth_dev_stop(RXTX_PORT);
 
-	if (test_pmd_ring_init() < 0)
+	if (test_pmd_ring_pair_create_attach() < 0)
 		return -1;
 
-	if (test_pmd_ring_pair_create() < 0)
-		return -1;
-
-	if (test_pmd_ring_pair_attach() < 0)
-		return -1;
 	return 0;
 }
 
-- 
1.9.1

